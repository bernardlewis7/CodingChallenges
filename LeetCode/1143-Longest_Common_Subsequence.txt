/*
*	Given two strings text1 and text2, return the length of their longest common subsequence.
*	A subsequence of a string is a new string generated from the original string with some characters(can be none) 
*   deleted without changing the relative order of the remaining characters. (eg, "ace" is a subsequence of "abcde" while "aec" is not). 
*   A common subsequence of two strings is a subsequence that is common to both strings.
*	If there is no common subsequence, return 0.
*
*
*	Input: text1 = "abcde", text2 = "ace" 
*	Output: 3  
* 	Input: text1 = "abc", text2 = "abc"
*	Output: 3
*	Input: text1 = "abc", text2 = "def"
*	Output: 0


*/






class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        
        int tab[text1.size()+1][text2.size()+1];
        for(int i=0;i<=text1.size();i++)
             for(int j=0;j<=text2.size();j++)
                    tab[i][j]=0;
        
        for(int i=1;i<=text1.size();i++){
            
            for(int j=1;j<=text2.size();j++){
                
                if(text1[i-1]==text2[j-1]){
                    tab[i][j]=1+tab[i-1][j-1];
                }
                else{
                    tab[i][j]=max(tab[i-1][j],tab[i][j-1]);
                }
            }
        }
        
        return tab[text1.size()][text2.size()];
    }
};